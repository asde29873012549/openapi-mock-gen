export const EXPORT_LANGUAGE = {
  TS: 'typescript',
  JS: 'javascript',
} as const;
export const DEFAULT_CONFIG = {
  outputDir: './.mocks',
  baseUrl: 'http://localhost:3000',
  arrayLength: 5,
  language: EXPORT_LANGUAGE.JS,
  useExample: true,
  dynamic: true,
};
export const TS_EXTENSION = '.ts';
export const JS_EXTENSION = '.js';
export const CONFIG_FILE_NAME = 'mock.config';
export const MANIFEST_FILE_NAME = 'manifest.json';
export const DEFAULT_MIN_NUMBER = 0;
export const DEFAULT_MAX_NUMBER = 9999999;
export const DEFAULT_MULTIPLE_OF = 1;
export const DEFAULT_SEED = 123;

export const DEFAULT_API_DIR_NAME = 'api';
export const OPENAPI_TYPES_FILE_NAME = 'openapi-types.d.ts';
export const DEFAULT_TYPES_FILE_NAME = 'types';

export const ADAPTERS = {
  MSW: 'msw',
};

// Raw template strings
export const GENERATED_COMMENT_FLAG = '@generated by openapi-mock-gen';

export const GENERATED_COMMENT = `/**
 * ${GENERATED_COMMENT_FLAG}
 * If you want to make changes, please remove this entire comment and edit the file directly.
 */`;

export const DISABLE_LINTING = '/* eslint-disable */';

export const DISABLE_TS_CHECK = '/* tslint:disable */\n// @ts-nocheck';

export const DISABLE_ALL_CHECK = `
${DISABLE_LINTING}
${DISABLE_TS_CHECK}`;

export const HTTP_METHODS_TYPE = `
type HttpMethods = 'get' | 'post' | 'put' | 'delete' | 'patch' | 'options' | 'head';
`;

export const FAKER_MAP_TYPE = `
type FakerMap = Record<string, string | (() => unknown)>;
`;

export const ENDPOINT_CONFIG_TYPE = `
interface EndpointConfig {
  arrayLength: number;
  useExample: boolean;
  dynamic: boolean;
  fakerMap?: FakerMap;
}`;

export const CONFIG_TYPE = `
interface Config extends EndpointConfig {
  specPath: string;
  outputDir: string;
  baseUrl: string;
  language: 'typescript' | 'javascript';
  endpoints?: Record<string, { [key in HttpMethods]?: Partial<EndpointConfig> }>;
}`;

export const FAKER_SEED = 'faker.seed({seed});';

export const ESM_IMPORT = "import {module} from '{modulePath}'";
export const CJS_IMPORT = "const {module} = require('{modulePath}')";

export const ESM_EXPORT = 'export default {exportName}';
export const CJS_EXPORT = 'module.exports = {exportName}';

export const ESM_EXPORT_NAMED = 'export { {exportName} }';
export const CJS_EXPORT_NAMED = 'module.exports = { {exportName} }';

export const CONFIG_BODY = `
const config{configType} = {
  specPath: '{specPath}',
  outputDir: '{outputDir}',
  baseUrl: '{baseUrl}',
  language: '{language}',

  // Global settings
  arrayLength: {arrayLength},
  useExample: {useExample},
  dynamic: {dynamic},

  // Use this to customize how specific fields are generated.
  // The key can be a string or regex. The value can be a fixed value, a faker expression string, or a function.
  // Functions are executed in a sandboxed Node.js environment, so you can access native APIs like Math, Date, etc, plus the faker instance.
  // Other dependencies such as self-defined/third-party modules, etc, are not allowed.
  // fakerMap: {
  //   // Eg. by key, using a faker expression string
  //   id: 'faker.string.uuid()',
  //   // Eg. by key, using a function with faker (requires importing faker in your config)
  //   name: () => faker.person.fullName(),
  //   // Eg. by regex, using a fixed value
  //   '(?:^|_)image|img|picture|photo(?:_|$)': 'https://picsum.photos/200',
  //   // Eg. using a custom function with native APIs
  //   user: () => (Math.random() > 0.5 ? 'John Doe' : 'Jane Doe'),
  // },

  // If you wish to customize the config for a specific endpoint, you can do so here.
  // The config for a specific endpoint will override the global config.
  // endpoints: {
  //   '/users': {
  //     'get': {
  //       arrayLength: 10,
  //       useExample: false,
  //       fakerMap: {
  //         // This will override the global fakerMap for this endpoint
  //         name: () => 'John Doe',
  //       },
  //     }
  //   }
  // }
};`;

export const MOCK_DATA_BODY = `
const mockData = (){mockDataType} => ({
  {mockData}
});`;

export const MANIFEST_BODY = `
{
  "manifest": {manifestData}
}`;
