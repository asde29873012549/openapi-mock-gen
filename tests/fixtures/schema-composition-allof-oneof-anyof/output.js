/**
 * @generated by openapi-mock-gen
 * If you want to make changes, please remove this entire comment and edit the file directly.
 */

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import { faker } from '@faker-js/faker';

faker.seed(123);

const mockData = () => ({
  200: faker.helpers.arrayElement([
    {
      stringValue: faker.lorem.words(),
      type: faker.helpers.arrayElement(['string', 'number', 'array']),
    },
    {
      numberValue: faker.number.int({ min: 0, max: 9999999, multipleOf: 1 }),
      type: faker.helpers.arrayElement(['number']),
    },
    {
      arrayValue: Array.from({ length: 1 }, () => faker.lorem.words()),
      type: faker.helpers.arrayElement(['array']),
    },
  ]),
  201: {
    id: faker.string.uuid(),
    created_at: faker.date.past(),
    version: faker.number.int({ min: 0, max: 9999999, multipleOf: 1 }),
    tags: Array.from({ length: 1 }, () => faker.lorem.words()),
    name: faker.person.fullName(),
    type: faker.helpers.arrayElement(['primary', 'secondary', 'tertiary']),
  },
  202: faker.helpers.arrayElement([
    { email: faker.internet.email() },
    { phone: faker.helpers.fromRegExp(/^\+?[1-9]\d{1,14}$/) },
    {
      address: {
        street: faker.location.streetAddress(),
        city: faker.location.city(),
        zip_code: faker.location.zipCode(),
      },
    },
  ]),
  203: {
    id: faker.string.uuid(),
    created_at: faker.date.past(),
    data: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          stringValue: faker.lorem.words(),
          type: faker.helpers.arrayElement(['string', 'number', 'array']),
        },
        {
          numberValue: faker.number.int({ min: 0, max: 9999999, multipleOf: 1 }),
          type: faker.helpers.arrayElement(['number']),
        },
        {
          arrayValue: Array.from({ length: 1 }, () => faker.lorem.words()),
          type: faker.helpers.arrayElement(['array']),
        },
      ]),
      faker.helpers.arrayElement([
        { email: faker.internet.email() },
        { phone: faker.helpers.fromRegExp(/^\+?[1-9]\d{1,14}$/) },
        {
          address: {
            street: faker.location.streetAddress(),
            city: faker.location.city(),
            zip_code: faker.location.zipCode(),
          },
        },
      ]),
    ]),
    additional: faker.helpers.arrayElement([faker.lorem.words(), { value: faker.lorem.words() }]),
  },
  204: {
    entity: {
      id: faker.string.uuid(),
      created_at: faker.date.past(),
      version: faker.number.int({ min: 0, max: 9999999, multipleOf: 1 }),
      tags: Array.from({ length: 1 }, () => faker.lorem.words()),
      name: faker.person.fullName(),
      type: faker.helpers.arrayElement(['primary', 'secondary', 'tertiary']),
    },
    flexible: faker.helpers.arrayElement([
      {
        stringValue: faker.lorem.words(),
        type: faker.helpers.arrayElement(['string', 'number', 'array']),
      },
      {
        numberValue: faker.number.int({ min: 0, max: 9999999, multipleOf: 1 }),
        type: faker.helpers.arrayElement(['number']),
      },
      {
        arrayValue: Array.from({ length: 1 }, () => faker.lorem.words()),
        type: faker.helpers.arrayElement(['array']),
      },
    ]),
    variant: faker.helpers.arrayElement([
      { email: faker.internet.email() },
      { phone: faker.helpers.fromRegExp(/^\+?[1-9]\d{1,14}$/) },
      {
        address: {
          street: faker.location.streetAddress(),
          city: faker.location.city(),
          zip_code: faker.location.zipCode(),
        },
      },
    ]),
    nested: {
      id: faker.string.uuid(),
      created_at: faker.date.past(),
      data: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            stringValue: faker.lorem.words(),
            type: faker.helpers.arrayElement(['string', 'number', 'array']),
          },
          {
            numberValue: faker.number.int({ min: 0, max: 9999999, multipleOf: 1 }),
            type: faker.helpers.arrayElement(['number']),
          },
          {
            arrayValue: Array.from({ length: 1 }, () => faker.lorem.words()),
            type: faker.helpers.arrayElement(['array']),
          },
        ]),
        faker.helpers.arrayElement([
          { email: faker.internet.email() },
          { phone: faker.helpers.fromRegExp(/^\+?[1-9]\d{1,14}$/) },
          {
            address: {
              street: faker.location.streetAddress(),
              city: faker.location.city(),
              zip_code: faker.location.zipCode(),
            },
          },
        ]),
      ]),
      additional: faker.helpers.arrayElement([faker.lorem.words(), { value: faker.lorem.words() }]),
    },
  },
});

export default mockData;