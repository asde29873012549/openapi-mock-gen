/**
 * @generated by openapi-mock-gen
 * If you want to make changes, please remove this entire comment and edit the file directly.
 */

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import { faker } from '@faker-js/faker';

faker.seed(123);

const mockData = () => ({
  200: {
    objectWithPropertiesNoType: {
      name: faker.person.fullName(),
      age: faker.number.int({ min: 20, max: 80, multipleOf: 1 }),
    },
    objectWithAdditionalPropertiesNoType: { [faker.lorem.words()]: faker.lorem.words() },
    arrayWithItemsNoType: Array.from({ length: 1 }, () => faker.lorem.words()),
    nestedInferenceObject: { level1: { level2: faker.lorem.words() } },
    complexInferenceObject: {
      objectProp: { value: faker.lorem.words() },
      arrayProp: Array.from({ length: 1 }, () => faker.number.int({ min: 0, max: 9999999, multipleOf: 1 })),
      normalProp: faker.datatype.boolean(),
    },
    arrayOfObjectsNoType: Array.from({ length: 1 }, () => ({
      id: faker.string.uuid(),
      nested: Array.from({ length: 1 }, () => faker.lorem.words()),
    })),
    mixedInferenceTypes: {
      shouldBeObject: { prop: faker.lorem.words() },
      shouldBeArray: Array.from({ length: 1 }, () => faker.number.int({ min: 0, max: 9999999, multipleOf: 1 })),
      shouldBeString: faker.string.alpha({ length: { min: 5, max: 10 } }),
      shouldBeNumber: faker.number.int({ min: 1, max: 100, multipleOf: 1 }),
      onlyDescription: faker.lorem.words(),
    },
    deepNestedInference: {
      level1: {
        [faker.lorem.words()]: Array.from({ length: 1 }, () => ({
          deepProp: faker.lorem.words(),
        })),
      },
    },
    emptySchemaObject: faker.lorem.words(),
    onlyDescriptionProperty: faker.lorem.words(),
    withFormat: faker.internet.email(),
    withPattern: faker.helpers.fromRegExp(/^[A-Z]{3}$/),
    withEnum: faker.helpers.arrayElement(['value1', 'value2', 'value3']),
  },
});

export default mockData;